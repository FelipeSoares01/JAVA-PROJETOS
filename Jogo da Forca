Desenvolva um jogo da forca. A palavra sorteada deve ser escolhida aleatoriamente a partir de um arquivo texto. Utilize uma coleção para armazenar os elementos e justifique a sua escolha. 



import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class JogoDaForca {
    private static final int MAX_TENTATIVAS = 6;

    public static void main(String[] args) {
        List<String> palavras = carregarPalavrasDoArquivo("Sena.txt");
        String palavraSorteada = sortearPalavra(palavras);
        jogar(palavraSorteada);
    }

    public static List<String> carregarPalavrasDoArquivo(String nomeArquivo) {
        List<String> palavras = new ArrayList<>();

        try (Scanner scanner = new Scanner(new File(nomeArquivo))) {
            while (scanner.hasNextLine()) {
                palavras.add(scanner.nextLine().trim());
            }
        } catch (FileNotFoundException e) {
            System.out.println("Arquivo não encontrado: " + nomeArquivo);
        }

        return palavras;
    }

    public static String sortearPalavra(List<String> palavras) {
        Random random = new Random();
        return palavras.get(random.nextInt(palavras.size()));
    }

    public static void jogar(String palavra) {
        Set<Character> letrasCertas = new HashSet<>();
        Set<Character> letrasErradas = new HashSet<>();
        int tentativas = 0;

        Scanner scanner = new Scanner(System.in);

        while (tentativas < MAX_TENTATIVAS) {
            exibirForca(tentativas);
            exibirPalavraEscondida(palavra, letrasCertas);

            char letra = lerLetra(scanner, letrasCertas, letrasErradas);
            if (palavra.contains(String.valueOf(letra))) {
                letrasCertas.add(letra);
            } else {
                letrasErradas.add(letra);
                tentativas++;
            }

            if (verificarPalavraCompleta(palavra, letrasCertas)) {
                System.out.println("Parabéns! Você acertou a palavra: " + palavra);
                return;
            }
        }

        System.out.println("Você perdeu! A palavra era: " + palavra);
    }

    /**
     * @param tentativas
     */
    public static void exibirForca(int tentativas) {
    String[] partesForca = {
            "  +---+\n" +
            "  |   |\n" +
            "      |\n" +
            "      |\n" +
            "      |\n" +
            "      |\n" +
            "=========",

            "  +---+\n" +
            "  |   |\n" +
            "  O   |\n" +
            "      |\n" +
            "      |\n" +
            "      |\n" +
            "=========",

            "  +---+\n" +
            "  |   |\n" +
            "  O   |\n" +
            "  |   |\n" +
            "      |\n" +
            "      |\n" +
            "=========",

            "  +---+\n" +
            "  |   |\n" +
            "  O   |\n" +
            " /|\\  |\n" +
            "      |\n" +
            "      |\n" +
            "=========",

            "  +---+\n" +
            "  |   |\n" +
            "  O   |\n" +
            " /|\\  |\n" +
            " /    |\n" +
            "      |\n" +
            "=========",

            "  +---+\n" +
            "  |   |\n" +
            "  O   |\n" +
            " /|\\  |\n" +
            " / \\  |\n" +
            "      |\n" +
            "========="
    };

    System.out.println(partesForca[tentativas]);
}


public static void exibirPalavraEscondida(String palavra, Set<Character> letrasCertas) {
StringBuilder palavraEscondida = new StringBuilder();
for (char letra : palavra.toCharArray()) {
    if (letrasCertas.contains(letra)) {
        palavraEscondida.append(letra).append(" ");
    } else {
        palavraEscondida.append("_ ");
    }
}

System.out.println("\nPalavra: " + palavraEscondida.toString());
}

public static char lerLetra(Scanner scanner, Set<Character> letrasCertas, Set<Character> letrasErradas) {
System.out.print("Digite uma letra: ");
char letra = scanner.nextLine().toLowerCase().charAt(0);
while (!Character.isLetter(letra) || letrasCertas.contains(letra) || letrasErradas.contains(letra)) {
    System.out.print("Entrada inválida. Digite uma letra não utilizada anteriormente: ");
    letra = scanner.nextLine().toLowerCase().charAt(0);
}

return letra;

}

public static boolean verificarPalavraCompleta(String palavra, Set<Character> letrasCertas) {
for (char letra : palavra.toCharArray()) {
if (!letrasCertas.contains(letra)) {
return false;
}
}
return true;
}
}
